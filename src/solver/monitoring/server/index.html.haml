!!!5
%html{ lang: 'en' }
  %head
    %meta{ charset: 'utf-8' }

    %link{ href: 'http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css', rel: 'stylesheet' }
    %style
      != indexCSSContent

    %script{ src: 'http://code.jquery.com/jquery-2.1.0.min.js' }
    %script{ src: 'http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js' }
    %script{ src: 'http://code.highcharts.com/highcharts.js' }
    %script{ src: 'https://raw.githubusercontent.com/mnarayan01/bootstrap-tab-history/v0.1.0/vendor/assets/javascripts/bootstrap-tab-history.js' }
    %script{ type: 'text/javascript' }
      != '\n//<![CDATA[\n' + indexJavaScriptContent + '\n//]]>\n'

    %title Monitor
  %body
    %main{ role: 'main' }
      .container
        %section
          %h2 Workers

          %ul.nav.nav-tabs
            - each workerJournal, idx in workerJournals
              %li{ class: (idx == 0 ? 'active' : null) }
                %a{ href: '#worker-' + workerJournal.worker.pid, 'data-toggle': 'tab', 'data-tab-history': 'true', 'data-tab-history-changer': 'push', 'data-tab-history-update-url': 'true' } #{ workerJournal.worker.pid }
          .tab-content
            - each workerJournal, idx in workerJournals
              .worker.tab-pane{ class: (idx == 0 ? 'active' : null), id: 'worker-' + workerJournal.worker.pid, 'data-worker-pid': workerJournal.worker.pid }
                %h3 Worker #{workerJournal.worker.pid}

                .row
                  %section.col-xs-6
                    %h4 General information
                    %dl.dl-horizontal
                      %dt Map
                      %dd
                        - var linkContent = workerJournal.map.id + ' (' + workerJournal.map.dateString() + ' ' + workerJournal.map.name + ')';
                        - var url = workerJournal.map.url();
                        - if(url)
                          %a{ href: url }= linkContent
                        - else
                          %span= linkContent
                      %dt Start time
                      %dd
                        %time{ datatime: workerJournal.startTime.toISOString() }= strftime('%Y-%m-%d %H:%M:%S', workerJournal.startTime)
                      - var topScoreInfo = workerJournal.getTopScoreInfo();
                      - if(topScoreInfo)
                        %dt Top Score
                        %dd= topScoreInfo.score
                        %dt Top Score At
                        %dd
                          %time{ datatime: topScoreInfo.time.toISOString() }
                            = strftime('%Y-%m-%d %H:%M:%S', topScoreInfo.time)
                            %span (after #{(topScoreInfo.time - workerJournal.startTime) / 1000} seconds)

                  %section.col-xs-6
                    %h4 Last Message
                    %dl.dl-horizontal
                      %dt Type
                      %dd= workerJournal.lastMessage.type
                      %dt Action
                      %dd= workerJournal.lastMessage.action
                      %dt Time
                      %dd
                        %time{ datatime: workerJournal.lastMessage.time.toISOString() }= strftime('%Y-%m-%d %H:%M:%S', workerJournal.lastMessage.time)

                - each solverStageJournalPair in [['annealing', workerJournal.annealingJournal], ['exhaustive', workerJournal.exhaustiveJournal]]
                  - var solverStageName = solverStageJournalPair[0];
                  - var solverStageDisplayName = solverStageName.slice(0, 1).toUpperCase() + solverStageName.slice(1);
                  - var solverStageJournal = solverStageJournalPair[1];

                  %section.solver-stage{ 'data-solver-stage-name': solverStageName }
                    %h4= solverStageDisplayName

                    - if(!solverStageJournal.isBlank())
                      - var solverStageStatistics = solverStageJournal.scoringDistribution.calculateStatistics();

                      %dl.dl-horizontal
                        %dt Top Score
                        %dd= solverStageJournal.scoringDistribution.max
                        %dt Top Score At
                        %dd
                          %time{ datatime: solverStageJournal.topScoreTime.toISOString() }
                            = strftime('%Y-%m-%d %H:%M:%S', solverStageJournal.topScoreTime)
                            %span (after #{(solverStageJournal.topScoreTime - workerJournal.startTime) / 1000} seconds)
                        %dt Count
                        %dd= solverStageStatistics.total
                        %dt Total Time (s)
                        %dd= solverStageJournal.runTime / 1000
                        %dt Average Time (s)
                        %dd= solverStageJournal.runTime / (1000 * solverStageStatistics.total)
                        %dt Min Score
                        %dd= solverStageStatistics.min
                        %dt Max Score
                        %dd= solverStageStatistics.max
                        %dt Average Score
                        %dd= solverStageStatistics.average

                      %div.score-distribution{ 'data-score-distribution': JSON.stringify(solverStageJournal.scoringDistribution.distribution) }
